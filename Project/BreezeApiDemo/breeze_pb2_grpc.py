# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import breeze_pb2 as breeze__pb2


class BreezeApiStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Connect = channel.unary_unary(
                '/breezedemo.BreezeApi/Connect',
                request_serializer=breeze__pb2.ConnectRequest.SerializeToString,
                response_deserializer=breeze__pb2.ConnectResponse.FromString,
                )
        self.GetCustomerDetails = channel.unary_unary(
                '/breezedemo.BreezeApi/GetCustomerDetails',
                request_serializer=breeze__pb2.CustomerRequest.SerializeToString,
                response_deserializer=breeze__pb2.ApiResponse.FromString,
                )
        self.GetDematHolding = channel.unary_unary(
                '/breezedemo.BreezeApi/GetDematHolding',
                request_serializer=breeze__pb2.Empty.SerializeToString,
                response_deserializer=breeze__pb2.ApiResponse.FromString,
                )
        self.GetLiveStreamingData = channel.unary_stream(
                '/breezedemo.BreezeApi/GetLiveStreamingData',
                request_serializer=breeze__pb2.Empty.SerializeToString,
                response_deserializer=breeze__pb2.LiveStreamData.FromString,
                )
        self.SubscribeOrderNotification = channel.unary_unary(
                '/breezedemo.BreezeApi/SubscribeOrderNotification',
                request_serializer=breeze__pb2.Empty.SerializeToString,
                response_deserializer=breeze__pb2.SubscribeResponse.FromString,
                )
        self.UnsubscribeOrderNotification = channel.unary_unary(
                '/breezedemo.BreezeApi/UnsubscribeOrderNotification',
                request_serializer=breeze__pb2.Empty.SerializeToString,
                response_deserializer=breeze__pb2.UnsubscribeResponse.FromString,
                )
        self.GetNames = channel.unary_unary(
                '/breezedemo.BreezeApi/GetNames',
                request_serializer=breeze__pb2.GetNamesRequest.SerializeToString,
                response_deserializer=breeze__pb2.GetNamesResponse.FromString,
                )


class BreezeApiServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Connect(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetCustomerDetails(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetDematHolding(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetLiveStreamingData(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SubscribeOrderNotification(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UnsubscribeOrderNotification(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetNames(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_BreezeApiServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Connect': grpc.unary_unary_rpc_method_handler(
                    servicer.Connect,
                    request_deserializer=breeze__pb2.ConnectRequest.FromString,
                    response_serializer=breeze__pb2.ConnectResponse.SerializeToString,
            ),
            'GetCustomerDetails': grpc.unary_unary_rpc_method_handler(
                    servicer.GetCustomerDetails,
                    request_deserializer=breeze__pb2.CustomerRequest.FromString,
                    response_serializer=breeze__pb2.ApiResponse.SerializeToString,
            ),
            'GetDematHolding': grpc.unary_unary_rpc_method_handler(
                    servicer.GetDematHolding,
                    request_deserializer=breeze__pb2.Empty.FromString,
                    response_serializer=breeze__pb2.ApiResponse.SerializeToString,
            ),
            'GetLiveStreamingData': grpc.unary_stream_rpc_method_handler(
                    servicer.GetLiveStreamingData,
                    request_deserializer=breeze__pb2.Empty.FromString,
                    response_serializer=breeze__pb2.LiveStreamData.SerializeToString,
            ),
            'SubscribeOrderNotification': grpc.unary_unary_rpc_method_handler(
                    servicer.SubscribeOrderNotification,
                    request_deserializer=breeze__pb2.Empty.FromString,
                    response_serializer=breeze__pb2.SubscribeResponse.SerializeToString,
            ),
            'UnsubscribeOrderNotification': grpc.unary_unary_rpc_method_handler(
                    servicer.UnsubscribeOrderNotification,
                    request_deserializer=breeze__pb2.Empty.FromString,
                    response_serializer=breeze__pb2.UnsubscribeResponse.SerializeToString,
            ),
            'GetNames': grpc.unary_unary_rpc_method_handler(
                    servicer.GetNames,
                    request_deserializer=breeze__pb2.GetNamesRequest.FromString,
                    response_serializer=breeze__pb2.GetNamesResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'breezedemo.BreezeApi', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class BreezeApi(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Connect(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/breezedemo.BreezeApi/Connect',
            breeze__pb2.ConnectRequest.SerializeToString,
            breeze__pb2.ConnectResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetCustomerDetails(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/breezedemo.BreezeApi/GetCustomerDetails',
            breeze__pb2.CustomerRequest.SerializeToString,
            breeze__pb2.ApiResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetDematHolding(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/breezedemo.BreezeApi/GetDematHolding',
            breeze__pb2.Empty.SerializeToString,
            breeze__pb2.ApiResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetLiveStreamingData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/breezedemo.BreezeApi/GetLiveStreamingData',
            breeze__pb2.Empty.SerializeToString,
            breeze__pb2.LiveStreamData.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SubscribeOrderNotification(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/breezedemo.BreezeApi/SubscribeOrderNotification',
            breeze__pb2.Empty.SerializeToString,
            breeze__pb2.SubscribeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UnsubscribeOrderNotification(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/breezedemo.BreezeApi/UnsubscribeOrderNotification',
            breeze__pb2.Empty.SerializeToString,
            breeze__pb2.UnsubscribeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetNames(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/breezedemo.BreezeApi/GetNames',
            breeze__pb2.GetNamesRequest.SerializeToString,
            breeze__pb2.GetNamesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
